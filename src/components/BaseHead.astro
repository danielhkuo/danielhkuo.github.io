---
// Import the tailwind.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/tailwind.css';
// Import Carbon Design System CSS for dynamic theming
import 'carbon-components-svelte/css/all.css';
import { themes, applyCarbonTokens, createThemeTokenMapping, getThemeVariant } from '../lib/themes';

interface Props {
	title: string;
	description: string;
	image?: string;
}

const { title, description, image = '/headshot.webp' } = Astro.props;

// Use Astro's global URL object directly. It's cleaner and avoids linter issues.
const canonicalURL = Astro.url;
const imageURL = new globalThis.URL(image, Astro.site ?? Astro.url).href;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="sitemap" href="/sitemap-index.xml" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads for scholarly aesthetic -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&family=Source+Serif+4:ital,opsz,wght@0,8..60,400;0,8..60,700;1,8..60,400&display=swap" rel="stylesheet">


<!-- ** THEME INITIALIZATION SCRIPT (REFACTORED WITH CARBON SUPPORT) ** -->
<script is:inline set:html={`
  const themes = ${JSON.stringify(themes)};

  function applyCarbonTokens(variant) {
    if (typeof document === 'undefined') return;
    
    // Set the Carbon theme attribute on the document element
    document.documentElement.setAttribute('data-carbon-theme', variant.carbonMapping.carbonTheme);
    
    // Apply custom Carbon token overrides
    for (const [token, value] of Object.entries(variant.carbonMapping.customOverrides)) {
      document.documentElement.style.setProperty(token, value);
    }
  }

  function createThemeTokenMapping(variant) {
    const customTokens = {};
    
    // Copy custom theme variables
    for (const [key, value] of Object.entries(variant)) {
      if (key !== 'carbonMapping' && typeof value === 'string') {
        customTokens[key] = value;
      }
    }
    
    // Merge with Carbon token overrides
    return {
      ...customTokens,
      ...variant.carbonMapping.customOverrides
    };
  }

  function applyTheme() {
    const themeId = localStorage.getItem('theme-id') || 'nord';
    let mode = localStorage.getItem('mode');

    if (!mode) {
      mode = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    const theme = themes.find(t => t.id === themeId) || themes[0];
    const variant = theme.variants[mode];

    // Set traditional classes and attributes
    document.documentElement.classList.toggle('dark', mode === 'dark');
    document.documentElement.dataset.theme = themeId;

    // Apply both custom CSS variables and Carbon design tokens
    const allTokens = createThemeTokenMapping(variant);
    for (const [key, value] of Object.entries(allTokens)) {
      document.documentElement.style.setProperty(key, value);
    }

    // Apply Carbon-specific theme attribute
    applyCarbonTokens(variant);
  }

  applyTheme();
`} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL.href} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageURL} />